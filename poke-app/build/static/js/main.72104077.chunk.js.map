{"version":3,"sources":["components/Header.js","components/Pokemon.js","actions/actions.js","components/PokemonList.js","App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["Header","className","Pokemon","props","useState","pokemon","setPokemon","useEffect","axios","get","url","then","res","data","name","sprites","front_shiny","src","alt","fetchPokemon","dispatch","type","console","log","payload","catch","err","response","connect","state","nextURL","lastURL","nextPokemon","currentURL","style","display","flexDirection","width","flexWrap","margin","map","key","id","justifyContent","onClick","App","Boolean","window","location","hostname","match","initialState","error","isFetching","reducer","action","results","next","previous","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72104077.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () =>{\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>Poke Redux</h1>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\"\r\n\r\nconst Pokemon = (props) => {\r\n    const [pokemon, setPokemon] = useState(\"\")\r\n    \r\n    useEffect(() => {\r\n        axios\r\n            .get(props.url)\r\n            .then(res =>{\r\n                //console.log(res.data)\r\n                setPokemon(res.data)\r\n            })\r\n        }, [props.url]\r\n        )\r\n    \r\n    \r\n        return(\r\n            <div className = \"pokemon\">\r\n                <p>{pokemon.name}</p>\r\n                {pokemon.sprites && pokemon.sprites.front_shiny && <img src={pokemon.sprites.front_shiny} alt=\"pokemon\"></img>}\r\n            </div>\r\n        )\r\n    }\r\n    export default Pokemon","import axios from \"axios\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport const FETCH_POKEMON_START = \"FETCH_POKEMONS_START\";\r\nexport const FETCH_POKEMON_SUCCESS = \"FETCH_POKEMONS_SUCCESS\";\r\nexport const FETCH_POKEMON_FAILURE = \"FETCH_POKEMON_FAILURE\";\r\n\r\nexport const FETCH_NEXT_SUCCESS = \"FETCH_NEXT_SUCCESS\";\r\nexport const FETCH_NEXT_FAILURE = \"FETCH_NEXT_FAILURE\";\r\n\r\nexport const fetchPokemon = (props) => dispatch => {\r\n    dispatch({ type: FETCH_POKEMON_START });\r\n    axios\r\n        .get(\"https://pokeapi.co/api/v2/pokemon?limit=20&offset=20\")\r\n        .then((res) =>{\r\n            console.log(res)\r\n            dispatch({\r\n                type: FETCH_POKEMON_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            dispatch({type: FETCH_POKEMON_FAILURE, payload: err.response})\r\n        })\r\n}\r\n\r\nexport const nextPokemon = (currentURL) => dispatch =>{\r\n    console.log(\"in actions \" + currentURL)\r\n    axios\r\n        .get(currentURL)\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch({\r\n                type: FETCH_POKEMON_SUCCESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        url: state.url\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(fetchPokemon)","import React, {useEffect} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Pokemon from \"./Pokemon\"\r\nimport {fetchPokemon, nextPokemon} from \"../actions/actions\";\r\n\r\nconst PokemonList = (props) => {\r\n    useEffect(() =>{\r\n        props.fetchPokemon()\r\n        // eslint-disable-next-line \r\n    }, [])\r\n\r\n    console.log(props.pokemon)\r\n\r\n    let backArrow = \"<\"\r\n\r\n    return(\r\n        <div>\r\n            <div style={{display: \"flex\", flexDirection: \"row\", width: 600, flexWrap: \"wrap\", margin: \"0 auto\"}}>\r\n                {props.pokemon.map(pokemon => {\r\n                    return <Pokemon pokemon={pokemon} url={pokemon.url} key={pokemon.id}/>\r\n                })}\r\n\r\n\r\n            </div>\r\n            <div className=\"list\" style={{display: \"flex\", justifyContent: \"space-evenly\", width: 300, margin: \"0 auto\"}}>\r\n                <button onClick={() => props.nextPokemon(props.lastURL)}> {backArrow} </button>\r\n                <button onClick={() => props.nextPokemon(props.nextURL)}> > </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        pokemon: state.pokemon,\r\n        nextURL: state.nextURL,\r\n        lastURL: state.lastURL,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchPokemon, nextPokemon}) (PokemonList)","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport Header from './components/Header';\nimport PokemonList from \"./components/PokemonList\";\n\nfunction App() {\n  axios\n    .get(\"https://pokeapi.co/api/v2/pokemon\")\n    .then((res) => {\n      console.log(res)\n    })\n\n  return (\n    <div className=\"App\">\n      <Header />\n     <PokemonList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_POKEMON_START, FETCH_POKEMON_SUCCESS, FETCH_POKEMON_FAILURE, FETCH_NEXT_SUCCESS } from \"../actions/actions\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    pokemon: [],\r\n    error: (\"\"),\r\n    isFetching: false,\r\n    nextURL: \"https://pokeapi.co/api/v2/pokemon?limit=20&offset=20\",\r\n    lastURL: \"https://pokeapi.co/api/v2/pokemon?limit=20&offset=20\",\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_POKEMON_START:\r\n            return {\r\n                ...state,\r\n                error: (\"\"),\r\n                isFetching: true\r\n            }\r\n\r\n        case FETCH_POKEMON_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pokemon: action.payload.results,\r\n                error: (\"\"),\r\n                isFetching: false,\r\n                nextURL: action.payload.next,\r\n                lastURL: action.payload.previous\r\n            }\r\n\r\n\r\n        case FETCH_POKEMON_FAILURE:\r\n            return{\r\n                ...state,\r\n                error: action.payload,\r\n                isFetching: false\r\n            }\r\n\r\n        case FETCH_NEXT_SUCCESS:\r\n            console.log(\"next in reducer\")\r\n            return{\r\n                state\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nimport {createStore, applyMiddleware} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"./reducers/reducer\";\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n    \nserviceWorker.unregister();\n"],"sourceRoot":""}